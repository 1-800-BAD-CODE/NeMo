
name: "two_pass"
init_from_nemo_model: null

model:
  # For reference only
  supported_languages: [
      "en", "es", "zh"
  ]
  multipass: true  # train with two passes

  tokenizer:
    special_tokens: null
    tokenizer_name: ${model.language_model.pretrained_model_name}
    tokenizer_model: null
    vocab_file: null

  language_model:
    config_file: null
    pretrained_model_name: bert-base-multilingual-cased
    nemo_file: null
    lm_checkpoint: null
    vocab_file: null
    config: null

  # Optionally we can learn the exclamation marks ["!", "！", "¡"]. If not using them, specify them as 'unused' so that
  # the datasets will not filter out sentences that end in '!', and therefore the model will not barf when seeing these
  # for the first time during inference.
  unused_punctuation: ["!", "！", "¡"]
  null_punct_token: "<NULL>"
  # Punctuation tokens that are predicted before each subword. Add "¡" here if using it.
  punct_pre_labels: ["<NULL>", "¿",]
  # Punctuation tokens that are predicted after each subword. Note the datasets below are configured to map the Chinese
  # enumeration comma to a regular Chinese comma, due to inconsistencies in the raw data, so it is not learned.
  punct_post_labels: [
      "<NULL>",
      ".", ",", "?",
      "？", "，", "。", # Chinese, no enum comma
      "、", "・",  # Japanese comma, middle dot
      "।", # Hindi
      "؟",  # Arabic
      "՞", # Armenian
      ";",  # Greek question mark
      "።",  # Amharic full stop
  ]
  loss:
    # Loss weights for punct_post_labels
    punct_post:
      # This would be more convenient with a dict. Values are aligned to punctuation.
      weight: [
          0.5,
          3, 3, 4,
          4, 3, 4,
          3, 5,
          3,
          4,
          1, 1, 1 # 3 placeholder punctuation tokens
      ]
    # Loss weights for punct_pre_labels
    punct_pre:
      weight: [0.5, 4.0]
    # Loss weights for [lower_case, upper_case]
    cap:
      weight: [0.5, 5.0]
    # Loss weights for [no_stop, full_stop]
    seg:
      weight: [0.5, 4.0]
  # Target padding value. No need to change.
  pad_value: -100

  train_ds:
    batch_size: 32
    num_workers: 6
    # A list of datasets will be used to create a ConcatMapDataset.
    sampling_technique: "temperature"
    sampling_temperature: 5
    # "common" key/value pairs will be added to every data set, unless that dataset already specifies the key.
    common:
      max_lines_per_input_file: 200000
      punct_pre_labels: ${model.punct_pre_labels}
      punct_post_labels: ${model.punct_post_labels}
      unused_punctuation: ${model.unused_punctuation}
      min_lines_per_eg: 2
      max_lines_per_eg: 6
      max_length: 128
      truncate_max_tokens: 0
    # Same as "common", but only for continuous-script languages
    common_continuous_script:
      min_input_length_chars: 2  # Need at least 2 to have char + punctuation
      max_input_length_chars: 64
    # Same as "common", but only for non continuous-script languages
    common_noncontinuous_script:
      min_input_length_words: 1
      max_input_length_words: 40
    # Typically, set up one data set per language.
    datasets:
      # targets can be any implementation of a PunctCapSegDataset; only TextPunctCapSegDataset is fully implemented.
      - _target_: nemo.collections.nlp.data.token_classification.punct_cap_seg_dataset.TextPunctCapSegDataset
        # One or more unprocessed, plain-text files containing one sentence per line
        text_files:
          - ???
        # Will be used to select the punctuation targets generator, which is language-specific.
        language: "en"
        # List of zero or more implementations of nlp.data.token_classification.punct_cap_seg_dataset.TextCleaner
        cleaners:
          # Remove ';' because it has a special meaning for greek punctuation, not used in other languages
          - _target_: nemo.collections.nlp.data.token_classification.punct_cap_seg_dataset.CharFilter
            chars_to_remove: [";", '"']
          - _target_: nemo.collections.nlp.data.token_classification.punct_cap_seg_dataset.StandardPunctNormalizer
            punct_tokens: ${model.punct_post_labels}
      - _target_: nemo.collections.nlp.data.token_classification.punct_cap_seg_dataset.TextPunctCapSegDataset
        text_files:
          - ???
        language: "es"
        cleaners:
          - _target_: nemo.collections.nlp.data.token_classification.punct_cap_seg_dataset.CharFilter
            chars_to_remove: [";", '"']
          - _target_: nemo.collections.nlp.data.token_classification.punct_cap_seg_dataset.SpanishPunctNormalizer
            pre_punct_tokens: ${model.punct_pre_labels}
            post_punct_tokens: ${model.punct_post_labels}
      - _target_: nemo.collections.nlp.data.token_classification.punct_cap_seg_dataset.TextPunctCapSegDataset
        text_files:
          - ???
        language: "zh"
        # Let dataset know this is a continuous-script language
        is_continuous: true
        cleaners:
          - _target_: nemo.collections.nlp.data.token_classification.punct_cap_seg_dataset.CharFilter
            chars_to_remove: [";", '"']
          - _target_: nemo.collections.nlp.data.token_classification.punct_cap_seg_dataset.ChineseTextCleaner
            remove_spaces: true
            replace_latin: true
            no_enum_comma: true
          - _target_: nemo.collections.nlp.data.token_classification.punct_cap_seg_dataset.StandardPunctNormalizer
            punct_tokens: ${model.punct_post_labels}

  validation_ds:
    batch_size: 40
    num_workers: 6
    # "common" options are analogous to train_ds
    common:
      max_lines_per_input_file: 400000
      punct_pre_labels: ${model.punct_pre_labels}
      punct_post_labels: ${model.punct_post_labels}
      unused_punctuation: ${model.unused_punctuation}
      min_lines_per_eg: 2
      max_lines_per_eg: 6
      max_length: 128
      truncate_max_tokens: 0
      rng_seed: 12345
    common_continuous_script:
      min_input_length_chars: 2
      max_input_length_chars: 64
    common_noncontinuous_script:
      min_input_length_words: 1
      max_input_length_words: 40
    datasets:
      # Probably one for each training language, with similar parameters
      - _target_: nemo.collections.nlp.data.token_classification.punct_cap_seg_dataset.TextPunctCapSegDataset
        text_files:
          - ???
        language: "en"
        cleaners:
          - _target_: nemo.collections.nlp.data.token_classification.punct_cap_seg_dataset.CharFilter
            chars_to_remove: [";", '"']
          - _target_: nemo.collections.nlp.data.token_classification.punct_cap_seg_dataset.StandardPunctNormalizer
            punct_tokens: ${model.punct_post_labels}
      - _target_: nemo.collections.nlp.data.token_classification.punct_cap_seg_dataset.TextPunctCapSegDataset
        text_files:
          - ???
        language: "es"
        cleaners:
          - _target_: nemo.collections.nlp.data.token_classification.punct_cap_seg_dataset.CharFilter
            chars_to_remove: [";", '"']
          - _target_: nemo.collections.nlp.data.token_classification.punct_cap_seg_dataset.SpanishPunctNormalizer
            pre_punct_tokens: ${model.punct_pre_labels}
            post_punct_tokens: ${model.punct_post_labels}
      - _target_: nemo.collections.nlp.data.token_classification.punct_cap_seg_dataset.TextPunctCapSegDataset
        text_files:
          - ???
        language: "zh"
        is_continuous: true
        cleaners:
          - _target_: nemo.collections.nlp.data.token_classification.punct_cap_seg_dataset.CharFilter
            chars_to_remove: [";", '"']
          - _target_: nemo.collections.nlp.data.token_classification.punct_cap_seg_dataset.ChineseTextCleaner
            remove_spaces: true
            replace_latin: true
            no_enum_comma: true
          - _target_: nemo.collections.nlp.data.token_classification.punct_cap_seg_dataset.StandardPunctNormalizer
            punct_tokens: ${model.punct_post_labels}

  punct_head_pre:
    num_layers: 1
    activation: relu
    dropout: 0.1
    use_transformer_init: true

  punct_head_post:
    num_layers: 1
    activation: relu
    dropout: 0.1
    use_transformer_init: true

  cap_head:
    num_layers: 1
    activation: relu
    dropout: 0.1
    use_transformer_init: true

  seg_head:
    num_layers: 1
    activation: relu
    dropout: 0.1
    use_transformer_init: true

  optim:
    name: adam
    lr: 2e-5
    weight_decay: 0
    sched:
      name: WarmupAnnealing
      min_lr: 1e-6
      last_epoch: -1
      warmup_ratio: null
      warmup_steps: 6000

trainer:
  devices: -1
  num_nodes: 1
  max_epochs: 1
  max_steps: 50000
  accumulate_grad_batches: 1
  gradient_clip_val: 0.0
  precision: 16 # Should be set to 16 for O1 and O2, default is 16 as PT ignores it when am_level is O0
  accelerator: auto
  log_every_n_steps: 250  # Interval of logging.
  val_check_interval: 5000  # Set to 0.25 to check 4 times per epoch, or an int for number of iterations
  resume_from_checkpoint: null
  logger: false
  enable_checkpointing: false
  progress_bar_refresh_rate: 10
  benchmark: false

exp_manager:
  exp_dir: nemo_exp/token/
  name: ${name}
  create_tensorboard_logger: true
  create_checkpoint_callback: true
  # Available metrics are val_{language}_{punct_pre,punct_post,cap,seg}_{f1,precision,recall}
  # TODO use average metrics all languages
  checkpoint_callback_params:
    monitor: "val_en_punct_post_f1"
    mode: "max"
    save_top_k: 2
    always_save_nemo: true
#  # for continuing from a '*-last.ckpt' in an experiment directory
#  version: 2022-10-03_16-56-33
#  resume_if_exists: true
#  resume_ignore_no_checkpoint: false
